// DE1_SoC_QSYS_mm_interconnect_5.v

// This file was auto-generated from altera_merlin_interconnect_wrapper_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 182 at 2017.03.28.17:28:49

`timescale 1 ps / 1 ps
module DE1_SoC_QSYS_mm_interconnect_5 (
		input  wire        pll_sys_outclk0_clk,                                                //                                              pll_sys_outclk0.clk
		input  wire        hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset, // hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset.reset
		input  wire        sgdma_0_reset_reset_bridge_in_reset_reset,                          //                          sgdma_0_reset_reset_bridge_in_reset.reset
		input  wire [31:0] sgdma_0_descriptor_read_address,                                    //                                      sgdma_0_descriptor_read.address
		output wire        sgdma_0_descriptor_read_waitrequest,                                //                                                             .waitrequest
		input  wire        sgdma_0_descriptor_read_read,                                       //                                                             .read
		output wire [31:0] sgdma_0_descriptor_read_readdata,                                   //                                                             .readdata
		output wire        sgdma_0_descriptor_read_readdatavalid,                              //                                                             .readdatavalid
		input  wire [31:0] sgdma_0_descriptor_write_address,                                   //                                     sgdma_0_descriptor_write.address
		output wire        sgdma_0_descriptor_write_waitrequest,                               //                                                             .waitrequest
		input  wire        sgdma_0_descriptor_write_write,                                     //                                                             .write
		input  wire [31:0] sgdma_0_descriptor_write_writedata,                                 //                                                             .writedata
		input  wire [31:0] sgdma_0_m_read_address,                                             //                                               sgdma_0_m_read.address
		output wire        sgdma_0_m_read_waitrequest,                                         //                                                             .waitrequest
		input  wire        sgdma_0_m_read_read,                                                //                                                             .read
		output wire [31:0] sgdma_0_m_read_readdata,                                            //                                                             .readdata
		output wire        sgdma_0_m_read_readdatavalid,                                       //                                                             .readdatavalid
		input  wire [31:0] sgdma_0_m_write_address,                                            //                                              sgdma_0_m_write.address
		output wire        sgdma_0_m_write_waitrequest,                                        //                                                             .waitrequest
		input  wire [3:0]  sgdma_0_m_write_byteenable,                                         //                                                             .byteenable
		input  wire        sgdma_0_m_write_write,                                              //                                                             .write
		input  wire [31:0] sgdma_0_m_write_writedata,                                          //                                                             .writedata
		output wire [28:0] hps_0_f2h_sdram0_data_address,                                      //                                        hps_0_f2h_sdram0_data.address
		output wire        hps_0_f2h_sdram0_data_write,                                        //                                                             .write
		output wire        hps_0_f2h_sdram0_data_read,                                         //                                                             .read
		input  wire [63:0] hps_0_f2h_sdram0_data_readdata,                                     //                                                             .readdata
		output wire [63:0] hps_0_f2h_sdram0_data_writedata,                                    //                                                             .writedata
		output wire [7:0]  hps_0_f2h_sdram0_data_burstcount,                                   //                                                             .burstcount
		output wire [7:0]  hps_0_f2h_sdram0_data_byteenable,                                   //                                                             .byteenable
		input  wire        hps_0_f2h_sdram0_data_readdatavalid,                                //                                                             .readdatavalid
		input  wire        hps_0_f2h_sdram0_data_waitrequest                                   //                                                             .waitrequest
	);

	wire          sgdma_0_m_write_translator_avalon_universal_master_0_waitrequest;                           // sgdma_0_m_write_translator_avalon_universal_master_0_agent:av_waitrequest -> sgdma_0_m_write_translator:uav_waitrequest
	wire    [2:0] sgdma_0_m_write_translator_avalon_universal_master_0_burstcount;                            // sgdma_0_m_write_translator:uav_burstcount -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] sgdma_0_m_write_translator_avalon_universal_master_0_writedata;                             // sgdma_0_m_write_translator:uav_writedata -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] sgdma_0_m_write_translator_avalon_universal_master_0_address;                               // sgdma_0_m_write_translator:uav_address -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:av_address
	wire          sgdma_0_m_write_translator_avalon_universal_master_0_lock;                                  // sgdma_0_m_write_translator:uav_lock -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:av_lock
	wire          sgdma_0_m_write_translator_avalon_universal_master_0_write;                                 // sgdma_0_m_write_translator:uav_write -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:av_write
	wire          sgdma_0_m_write_translator_avalon_universal_master_0_read;                                  // sgdma_0_m_write_translator:uav_read -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] sgdma_0_m_write_translator_avalon_universal_master_0_readdata;                              // sgdma_0_m_write_translator_avalon_universal_master_0_agent:av_readdata -> sgdma_0_m_write_translator:uav_readdata
	wire          sgdma_0_m_write_translator_avalon_universal_master_0_debugaccess;                           // sgdma_0_m_write_translator:uav_debugaccess -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] sgdma_0_m_write_translator_avalon_universal_master_0_byteenable;                            // sgdma_0_m_write_translator:uav_byteenable -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:av_byteenable
	wire          sgdma_0_m_write_translator_avalon_universal_master_0_readdatavalid;                         // sgdma_0_m_write_translator_avalon_universal_master_0_agent:av_readdatavalid -> sgdma_0_m_write_translator:uav_readdatavalid
	wire          rsp_xbar_mux_src_endofpacket;                                                               // rsp_xbar_mux:src_endofpacket -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_src_valid;                                                                     // rsp_xbar_mux:src_valid -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_src_startofpacket;                                                             // rsp_xbar_mux:src_startofpacket -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [111:0] rsp_xbar_mux_src_data;                                                                      // rsp_xbar_mux:src_data -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:rp_data
	wire    [3:0] rsp_xbar_mux_src_channel;                                                                   // rsp_xbar_mux:src_channel -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_src_ready;                                                                     // sgdma_0_m_write_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux:src_ready
	wire          sgdma_0_m_read_translator_avalon_universal_master_0_waitrequest;                            // sgdma_0_m_read_translator_avalon_universal_master_0_agent:av_waitrequest -> sgdma_0_m_read_translator:uav_waitrequest
	wire    [2:0] sgdma_0_m_read_translator_avalon_universal_master_0_burstcount;                             // sgdma_0_m_read_translator:uav_burstcount -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] sgdma_0_m_read_translator_avalon_universal_master_0_writedata;                              // sgdma_0_m_read_translator:uav_writedata -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] sgdma_0_m_read_translator_avalon_universal_master_0_address;                                // sgdma_0_m_read_translator:uav_address -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:av_address
	wire          sgdma_0_m_read_translator_avalon_universal_master_0_lock;                                   // sgdma_0_m_read_translator:uav_lock -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:av_lock
	wire          sgdma_0_m_read_translator_avalon_universal_master_0_write;                                  // sgdma_0_m_read_translator:uav_write -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:av_write
	wire          sgdma_0_m_read_translator_avalon_universal_master_0_read;                                   // sgdma_0_m_read_translator:uav_read -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] sgdma_0_m_read_translator_avalon_universal_master_0_readdata;                               // sgdma_0_m_read_translator_avalon_universal_master_0_agent:av_readdata -> sgdma_0_m_read_translator:uav_readdata
	wire          sgdma_0_m_read_translator_avalon_universal_master_0_debugaccess;                            // sgdma_0_m_read_translator:uav_debugaccess -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] sgdma_0_m_read_translator_avalon_universal_master_0_byteenable;                             // sgdma_0_m_read_translator:uav_byteenable -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:av_byteenable
	wire          sgdma_0_m_read_translator_avalon_universal_master_0_readdatavalid;                          // sgdma_0_m_read_translator_avalon_universal_master_0_agent:av_readdatavalid -> sgdma_0_m_read_translator:uav_readdatavalid
	wire          rsp_xbar_mux_001_src_endofpacket;                                                           // rsp_xbar_mux_001:src_endofpacket -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_001_src_valid;                                                                 // rsp_xbar_mux_001:src_valid -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_001_src_startofpacket;                                                         // rsp_xbar_mux_001:src_startofpacket -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [111:0] rsp_xbar_mux_001_src_data;                                                                  // rsp_xbar_mux_001:src_data -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:rp_data
	wire    [3:0] rsp_xbar_mux_001_src_channel;                                                               // rsp_xbar_mux_001:src_channel -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_001_src_ready;                                                                 // sgdma_0_m_read_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_001:src_ready
	wire          sgdma_0_descriptor_write_translator_avalon_universal_master_0_waitrequest;                  // sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:av_waitrequest -> sgdma_0_descriptor_write_translator:uav_waitrequest
	wire    [2:0] sgdma_0_descriptor_write_translator_avalon_universal_master_0_burstcount;                   // sgdma_0_descriptor_write_translator:uav_burstcount -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] sgdma_0_descriptor_write_translator_avalon_universal_master_0_writedata;                    // sgdma_0_descriptor_write_translator:uav_writedata -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] sgdma_0_descriptor_write_translator_avalon_universal_master_0_address;                      // sgdma_0_descriptor_write_translator:uav_address -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:av_address
	wire          sgdma_0_descriptor_write_translator_avalon_universal_master_0_lock;                         // sgdma_0_descriptor_write_translator:uav_lock -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:av_lock
	wire          sgdma_0_descriptor_write_translator_avalon_universal_master_0_write;                        // sgdma_0_descriptor_write_translator:uav_write -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:av_write
	wire          sgdma_0_descriptor_write_translator_avalon_universal_master_0_read;                         // sgdma_0_descriptor_write_translator:uav_read -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] sgdma_0_descriptor_write_translator_avalon_universal_master_0_readdata;                     // sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:av_readdata -> sgdma_0_descriptor_write_translator:uav_readdata
	wire          sgdma_0_descriptor_write_translator_avalon_universal_master_0_debugaccess;                  // sgdma_0_descriptor_write_translator:uav_debugaccess -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] sgdma_0_descriptor_write_translator_avalon_universal_master_0_byteenable;                   // sgdma_0_descriptor_write_translator:uav_byteenable -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:av_byteenable
	wire          sgdma_0_descriptor_write_translator_avalon_universal_master_0_readdatavalid;                // sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:av_readdatavalid -> sgdma_0_descriptor_write_translator:uav_readdatavalid
	wire          rsp_xbar_mux_002_src_endofpacket;                                                           // rsp_xbar_mux_002:src_endofpacket -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_002_src_valid;                                                                 // rsp_xbar_mux_002:src_valid -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_002_src_startofpacket;                                                         // rsp_xbar_mux_002:src_startofpacket -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [111:0] rsp_xbar_mux_002_src_data;                                                                  // rsp_xbar_mux_002:src_data -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:rp_data
	wire    [3:0] rsp_xbar_mux_002_src_channel;                                                               // rsp_xbar_mux_002:src_channel -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_002_src_ready;                                                                 // sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_002:src_ready
	wire          sgdma_0_descriptor_read_translator_avalon_universal_master_0_waitrequest;                   // sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:av_waitrequest -> sgdma_0_descriptor_read_translator:uav_waitrequest
	wire    [2:0] sgdma_0_descriptor_read_translator_avalon_universal_master_0_burstcount;                    // sgdma_0_descriptor_read_translator:uav_burstcount -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] sgdma_0_descriptor_read_translator_avalon_universal_master_0_writedata;                     // sgdma_0_descriptor_read_translator:uav_writedata -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] sgdma_0_descriptor_read_translator_avalon_universal_master_0_address;                       // sgdma_0_descriptor_read_translator:uav_address -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:av_address
	wire          sgdma_0_descriptor_read_translator_avalon_universal_master_0_lock;                          // sgdma_0_descriptor_read_translator:uav_lock -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:av_lock
	wire          sgdma_0_descriptor_read_translator_avalon_universal_master_0_write;                         // sgdma_0_descriptor_read_translator:uav_write -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:av_write
	wire          sgdma_0_descriptor_read_translator_avalon_universal_master_0_read;                          // sgdma_0_descriptor_read_translator:uav_read -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:av_read
	wire   [31:0] sgdma_0_descriptor_read_translator_avalon_universal_master_0_readdata;                      // sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:av_readdata -> sgdma_0_descriptor_read_translator:uav_readdata
	wire          sgdma_0_descriptor_read_translator_avalon_universal_master_0_debugaccess;                   // sgdma_0_descriptor_read_translator:uav_debugaccess -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] sgdma_0_descriptor_read_translator_avalon_universal_master_0_byteenable;                    // sgdma_0_descriptor_read_translator:uav_byteenable -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:av_byteenable
	wire          sgdma_0_descriptor_read_translator_avalon_universal_master_0_readdatavalid;                 // sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:av_readdatavalid -> sgdma_0_descriptor_read_translator:uav_readdatavalid
	wire          rsp_xbar_mux_003_src_endofpacket;                                                           // rsp_xbar_mux_003:src_endofpacket -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:rp_endofpacket
	wire          rsp_xbar_mux_003_src_valid;                                                                 // rsp_xbar_mux_003:src_valid -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:rp_valid
	wire          rsp_xbar_mux_003_src_startofpacket;                                                         // rsp_xbar_mux_003:src_startofpacket -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:rp_startofpacket
	wire  [111:0] rsp_xbar_mux_003_src_data;                                                                  // rsp_xbar_mux_003:src_data -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:rp_data
	wire    [3:0] rsp_xbar_mux_003_src_channel;                                                               // rsp_xbar_mux_003:src_channel -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:rp_channel
	wire          rsp_xbar_mux_003_src_ready;                                                                 // sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:rp_ready -> rsp_xbar_mux_003:src_ready
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_waitrequest;             // hps_0_f2h_sdram0_data_translator:uav_waitrequest -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:m0_waitrequest
	wire   [10:0] hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_burstcount;              // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:m0_burstcount -> hps_0_f2h_sdram0_data_translator:uav_burstcount
	wire   [63:0] hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_writedata;               // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:m0_writedata -> hps_0_f2h_sdram0_data_translator:uav_writedata
	wire   [31:0] hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_address;                 // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:m0_address -> hps_0_f2h_sdram0_data_translator:uav_address
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_write;                   // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:m0_write -> hps_0_f2h_sdram0_data_translator:uav_write
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_lock;                    // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:m0_lock -> hps_0_f2h_sdram0_data_translator:uav_lock
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_read;                    // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:m0_read -> hps_0_f2h_sdram0_data_translator:uav_read
	wire   [63:0] hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_readdata;                // hps_0_f2h_sdram0_data_translator:uav_readdata -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:m0_readdata
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_readdatavalid;           // hps_0_f2h_sdram0_data_translator:uav_readdatavalid -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:m0_readdatavalid
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_debugaccess;             // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:m0_debugaccess -> hps_0_f2h_sdram0_data_translator:uav_debugaccess
	wire    [7:0] hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_byteenable;              // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:m0_byteenable -> hps_0_f2h_sdram0_data_translator:uav_byteenable
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_endofpacket;      // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rf_source_endofpacket -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_valid;            // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rf_source_valid -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo:in_valid
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_startofpacket;    // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rf_source_startofpacket -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [148:0] hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_data;             // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rf_source_data -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo:in_data
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_ready;            // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo:in_ready -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rf_source_ready
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket;   // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo:out_endofpacket -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rf_sink_endofpacket
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid;         // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo:out_valid -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rf_sink_valid
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket; // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo:out_startofpacket -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rf_sink_startofpacket
	wire  [148:0] hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data;          // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo:out_data -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rf_sink_data
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready;         // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rf_sink_ready -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo:out_ready
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid;       // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rdata_fifo_src_valid -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_valid
	wire   [65:0] hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data;        // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rdata_fifo_src_data -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_data
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready;       // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rdata_fifo_sink_ready -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rdata_fifo_src_ready
	wire          sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_endofpacket;                  // sgdma_0_m_write_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router:sink_endofpacket
	wire          sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_valid;                        // sgdma_0_m_write_translator_avalon_universal_master_0_agent:cp_valid -> addr_router:sink_valid
	wire          sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_startofpacket;                // sgdma_0_m_write_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router:sink_startofpacket
	wire  [111:0] sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_data;                         // sgdma_0_m_write_translator_avalon_universal_master_0_agent:cp_data -> addr_router:sink_data
	wire          sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_ready;                        // addr_router:sink_ready -> sgdma_0_m_write_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_src_endofpacket;                                                                // addr_router:src_endofpacket -> cmd_xbar_demux:sink_endofpacket
	wire          addr_router_src_valid;                                                                      // addr_router:src_valid -> cmd_xbar_demux:sink_valid
	wire          addr_router_src_startofpacket;                                                              // addr_router:src_startofpacket -> cmd_xbar_demux:sink_startofpacket
	wire  [111:0] addr_router_src_data;                                                                       // addr_router:src_data -> cmd_xbar_demux:sink_data
	wire    [3:0] addr_router_src_channel;                                                                    // addr_router:src_channel -> cmd_xbar_demux:sink_channel
	wire          addr_router_src_ready;                                                                      // cmd_xbar_demux:sink_ready -> addr_router:src_ready
	wire          sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_endofpacket;                   // sgdma_0_m_read_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_001:sink_endofpacket
	wire          sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_valid;                         // sgdma_0_m_read_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_001:sink_valid
	wire          sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_startofpacket;                 // sgdma_0_m_read_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_001:sink_startofpacket
	wire  [111:0] sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_data;                          // sgdma_0_m_read_translator_avalon_universal_master_0_agent:cp_data -> addr_router_001:sink_data
	wire          sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_ready;                         // addr_router_001:sink_ready -> sgdma_0_m_read_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_001_src_endofpacket;                                                            // addr_router_001:src_endofpacket -> cmd_xbar_demux_001:sink_endofpacket
	wire          addr_router_001_src_valid;                                                                  // addr_router_001:src_valid -> cmd_xbar_demux_001:sink_valid
	wire          addr_router_001_src_startofpacket;                                                          // addr_router_001:src_startofpacket -> cmd_xbar_demux_001:sink_startofpacket
	wire  [111:0] addr_router_001_src_data;                                                                   // addr_router_001:src_data -> cmd_xbar_demux_001:sink_data
	wire    [3:0] addr_router_001_src_channel;                                                                // addr_router_001:src_channel -> cmd_xbar_demux_001:sink_channel
	wire          addr_router_001_src_ready;                                                                  // cmd_xbar_demux_001:sink_ready -> addr_router_001:src_ready
	wire          sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_endofpacket;         // sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_002:sink_endofpacket
	wire          sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_valid;               // sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_002:sink_valid
	wire          sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_startofpacket;       // sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_002:sink_startofpacket
	wire  [111:0] sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_data;                // sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:cp_data -> addr_router_002:sink_data
	wire          sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_ready;               // addr_router_002:sink_ready -> sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_002_src_endofpacket;                                                            // addr_router_002:src_endofpacket -> cmd_xbar_demux_002:sink_endofpacket
	wire          addr_router_002_src_valid;                                                                  // addr_router_002:src_valid -> cmd_xbar_demux_002:sink_valid
	wire          addr_router_002_src_startofpacket;                                                          // addr_router_002:src_startofpacket -> cmd_xbar_demux_002:sink_startofpacket
	wire  [111:0] addr_router_002_src_data;                                                                   // addr_router_002:src_data -> cmd_xbar_demux_002:sink_data
	wire    [3:0] addr_router_002_src_channel;                                                                // addr_router_002:src_channel -> cmd_xbar_demux_002:sink_channel
	wire          addr_router_002_src_ready;                                                                  // cmd_xbar_demux_002:sink_ready -> addr_router_002:src_ready
	wire          sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_endofpacket;          // sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:cp_endofpacket -> addr_router_003:sink_endofpacket
	wire          sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_valid;                // sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:cp_valid -> addr_router_003:sink_valid
	wire          sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_startofpacket;        // sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:cp_startofpacket -> addr_router_003:sink_startofpacket
	wire  [111:0] sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_data;                 // sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:cp_data -> addr_router_003:sink_data
	wire          sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_ready;                // addr_router_003:sink_ready -> sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent:cp_ready
	wire          addr_router_003_src_endofpacket;                                                            // addr_router_003:src_endofpacket -> cmd_xbar_demux_003:sink_endofpacket
	wire          addr_router_003_src_valid;                                                                  // addr_router_003:src_valid -> cmd_xbar_demux_003:sink_valid
	wire          addr_router_003_src_startofpacket;                                                          // addr_router_003:src_startofpacket -> cmd_xbar_demux_003:sink_startofpacket
	wire  [111:0] addr_router_003_src_data;                                                                   // addr_router_003:src_data -> cmd_xbar_demux_003:sink_data
	wire    [3:0] addr_router_003_src_channel;                                                                // addr_router_003:src_channel -> cmd_xbar_demux_003:sink_channel
	wire          addr_router_003_src_ready;                                                                  // cmd_xbar_demux_003:sink_ready -> addr_router_003:src_ready
	wire          cmd_xbar_demux_src0_endofpacket;                                                            // cmd_xbar_demux:src0_endofpacket -> cmd_xbar_mux:sink0_endofpacket
	wire          cmd_xbar_demux_src0_valid;                                                                  // cmd_xbar_demux:src0_valid -> cmd_xbar_mux:sink0_valid
	wire          cmd_xbar_demux_src0_startofpacket;                                                          // cmd_xbar_demux:src0_startofpacket -> cmd_xbar_mux:sink0_startofpacket
	wire  [111:0] cmd_xbar_demux_src0_data;                                                                   // cmd_xbar_demux:src0_data -> cmd_xbar_mux:sink0_data
	wire    [3:0] cmd_xbar_demux_src0_channel;                                                                // cmd_xbar_demux:src0_channel -> cmd_xbar_mux:sink0_channel
	wire          cmd_xbar_demux_src0_ready;                                                                  // cmd_xbar_mux:sink0_ready -> cmd_xbar_demux:src0_ready
	wire          cmd_xbar_demux_001_src0_endofpacket;                                                        // cmd_xbar_demux_001:src0_endofpacket -> cmd_xbar_mux:sink1_endofpacket
	wire          cmd_xbar_demux_001_src0_valid;                                                              // cmd_xbar_demux_001:src0_valid -> cmd_xbar_mux:sink1_valid
	wire          cmd_xbar_demux_001_src0_startofpacket;                                                      // cmd_xbar_demux_001:src0_startofpacket -> cmd_xbar_mux:sink1_startofpacket
	wire  [111:0] cmd_xbar_demux_001_src0_data;                                                               // cmd_xbar_demux_001:src0_data -> cmd_xbar_mux:sink1_data
	wire    [3:0] cmd_xbar_demux_001_src0_channel;                                                            // cmd_xbar_demux_001:src0_channel -> cmd_xbar_mux:sink1_channel
	wire          cmd_xbar_demux_001_src0_ready;                                                              // cmd_xbar_mux:sink1_ready -> cmd_xbar_demux_001:src0_ready
	wire          cmd_xbar_demux_002_src0_endofpacket;                                                        // cmd_xbar_demux_002:src0_endofpacket -> cmd_xbar_mux:sink2_endofpacket
	wire          cmd_xbar_demux_002_src0_valid;                                                              // cmd_xbar_demux_002:src0_valid -> cmd_xbar_mux:sink2_valid
	wire          cmd_xbar_demux_002_src0_startofpacket;                                                      // cmd_xbar_demux_002:src0_startofpacket -> cmd_xbar_mux:sink2_startofpacket
	wire  [111:0] cmd_xbar_demux_002_src0_data;                                                               // cmd_xbar_demux_002:src0_data -> cmd_xbar_mux:sink2_data
	wire    [3:0] cmd_xbar_demux_002_src0_channel;                                                            // cmd_xbar_demux_002:src0_channel -> cmd_xbar_mux:sink2_channel
	wire          cmd_xbar_demux_002_src0_ready;                                                              // cmd_xbar_mux:sink2_ready -> cmd_xbar_demux_002:src0_ready
	wire          cmd_xbar_demux_003_src0_endofpacket;                                                        // cmd_xbar_demux_003:src0_endofpacket -> cmd_xbar_mux:sink3_endofpacket
	wire          cmd_xbar_demux_003_src0_valid;                                                              // cmd_xbar_demux_003:src0_valid -> cmd_xbar_mux:sink3_valid
	wire          cmd_xbar_demux_003_src0_startofpacket;                                                      // cmd_xbar_demux_003:src0_startofpacket -> cmd_xbar_mux:sink3_startofpacket
	wire  [111:0] cmd_xbar_demux_003_src0_data;                                                               // cmd_xbar_demux_003:src0_data -> cmd_xbar_mux:sink3_data
	wire    [3:0] cmd_xbar_demux_003_src0_channel;                                                            // cmd_xbar_demux_003:src0_channel -> cmd_xbar_mux:sink3_channel
	wire          cmd_xbar_demux_003_src0_ready;                                                              // cmd_xbar_mux:sink3_ready -> cmd_xbar_demux_003:src0_ready
	wire          rsp_xbar_demux_src0_endofpacket;                                                            // rsp_xbar_demux:src0_endofpacket -> rsp_xbar_mux:sink0_endofpacket
	wire          rsp_xbar_demux_src0_valid;                                                                  // rsp_xbar_demux:src0_valid -> rsp_xbar_mux:sink0_valid
	wire          rsp_xbar_demux_src0_startofpacket;                                                          // rsp_xbar_demux:src0_startofpacket -> rsp_xbar_mux:sink0_startofpacket
	wire  [111:0] rsp_xbar_demux_src0_data;                                                                   // rsp_xbar_demux:src0_data -> rsp_xbar_mux:sink0_data
	wire    [3:0] rsp_xbar_demux_src0_channel;                                                                // rsp_xbar_demux:src0_channel -> rsp_xbar_mux:sink0_channel
	wire          rsp_xbar_demux_src0_ready;                                                                  // rsp_xbar_mux:sink0_ready -> rsp_xbar_demux:src0_ready
	wire          rsp_xbar_demux_src1_endofpacket;                                                            // rsp_xbar_demux:src1_endofpacket -> rsp_xbar_mux_001:sink0_endofpacket
	wire          rsp_xbar_demux_src1_valid;                                                                  // rsp_xbar_demux:src1_valid -> rsp_xbar_mux_001:sink0_valid
	wire          rsp_xbar_demux_src1_startofpacket;                                                          // rsp_xbar_demux:src1_startofpacket -> rsp_xbar_mux_001:sink0_startofpacket
	wire  [111:0] rsp_xbar_demux_src1_data;                                                                   // rsp_xbar_demux:src1_data -> rsp_xbar_mux_001:sink0_data
	wire    [3:0] rsp_xbar_demux_src1_channel;                                                                // rsp_xbar_demux:src1_channel -> rsp_xbar_mux_001:sink0_channel
	wire          rsp_xbar_demux_src1_ready;                                                                  // rsp_xbar_mux_001:sink0_ready -> rsp_xbar_demux:src1_ready
	wire          rsp_xbar_demux_src2_endofpacket;                                                            // rsp_xbar_demux:src2_endofpacket -> rsp_xbar_mux_002:sink0_endofpacket
	wire          rsp_xbar_demux_src2_valid;                                                                  // rsp_xbar_demux:src2_valid -> rsp_xbar_mux_002:sink0_valid
	wire          rsp_xbar_demux_src2_startofpacket;                                                          // rsp_xbar_demux:src2_startofpacket -> rsp_xbar_mux_002:sink0_startofpacket
	wire  [111:0] rsp_xbar_demux_src2_data;                                                                   // rsp_xbar_demux:src2_data -> rsp_xbar_mux_002:sink0_data
	wire    [3:0] rsp_xbar_demux_src2_channel;                                                                // rsp_xbar_demux:src2_channel -> rsp_xbar_mux_002:sink0_channel
	wire          rsp_xbar_demux_src2_ready;                                                                  // rsp_xbar_mux_002:sink0_ready -> rsp_xbar_demux:src2_ready
	wire          rsp_xbar_demux_src3_endofpacket;                                                            // rsp_xbar_demux:src3_endofpacket -> rsp_xbar_mux_003:sink0_endofpacket
	wire          rsp_xbar_demux_src3_valid;                                                                  // rsp_xbar_demux:src3_valid -> rsp_xbar_mux_003:sink0_valid
	wire          rsp_xbar_demux_src3_startofpacket;                                                          // rsp_xbar_demux:src3_startofpacket -> rsp_xbar_mux_003:sink0_startofpacket
	wire  [111:0] rsp_xbar_demux_src3_data;                                                                   // rsp_xbar_demux:src3_data -> rsp_xbar_mux_003:sink0_data
	wire    [3:0] rsp_xbar_demux_src3_channel;                                                                // rsp_xbar_demux:src3_channel -> rsp_xbar_mux_003:sink0_channel
	wire          rsp_xbar_demux_src3_ready;                                                                  // rsp_xbar_mux_003:sink0_ready -> rsp_xbar_demux:src3_ready
	wire          cmd_xbar_mux_src_endofpacket;                                                               // cmd_xbar_mux:src_endofpacket -> width_adapter:in_endofpacket
	wire          cmd_xbar_mux_src_valid;                                                                     // cmd_xbar_mux:src_valid -> width_adapter:in_valid
	wire          cmd_xbar_mux_src_startofpacket;                                                             // cmd_xbar_mux:src_startofpacket -> width_adapter:in_startofpacket
	wire  [111:0] cmd_xbar_mux_src_data;                                                                      // cmd_xbar_mux:src_data -> width_adapter:in_data
	wire    [3:0] cmd_xbar_mux_src_channel;                                                                   // cmd_xbar_mux:src_channel -> width_adapter:in_channel
	wire          cmd_xbar_mux_src_ready;                                                                     // width_adapter:in_ready -> cmd_xbar_mux:src_ready
	wire          id_router_src_endofpacket;                                                                  // id_router:src_endofpacket -> width_adapter_001:in_endofpacket
	wire          id_router_src_valid;                                                                        // id_router:src_valid -> width_adapter_001:in_valid
	wire          id_router_src_startofpacket;                                                                // id_router:src_startofpacket -> width_adapter_001:in_startofpacket
	wire  [147:0] id_router_src_data;                                                                         // id_router:src_data -> width_adapter_001:in_data
	wire    [3:0] id_router_src_channel;                                                                      // id_router:src_channel -> width_adapter_001:in_channel
	wire          id_router_src_ready;                                                                        // width_adapter_001:in_ready -> id_router:src_ready
	wire          width_adapter_001_src_endofpacket;                                                          // width_adapter_001:out_endofpacket -> rsp_xbar_demux:sink_endofpacket
	wire          width_adapter_001_src_valid;                                                                // width_adapter_001:out_valid -> rsp_xbar_demux:sink_valid
	wire          width_adapter_001_src_startofpacket;                                                        // width_adapter_001:out_startofpacket -> rsp_xbar_demux:sink_startofpacket
	wire  [111:0] width_adapter_001_src_data;                                                                 // width_adapter_001:out_data -> rsp_xbar_demux:sink_data
	wire          width_adapter_001_src_ready;                                                                // rsp_xbar_demux:sink_ready -> width_adapter_001:out_ready
	wire    [3:0] width_adapter_001_src_channel;                                                              // width_adapter_001:out_channel -> rsp_xbar_demux:sink_channel
	wire          width_adapter_src_endofpacket;                                                              // width_adapter:out_endofpacket -> agent_pipeline:in_endofpacket
	wire          width_adapter_src_valid;                                                                    // width_adapter:out_valid -> agent_pipeline:in_valid
	wire          width_adapter_src_startofpacket;                                                            // width_adapter:out_startofpacket -> agent_pipeline:in_startofpacket
	wire  [147:0] width_adapter_src_data;                                                                     // width_adapter:out_data -> agent_pipeline:in_data
	wire          width_adapter_src_ready;                                                                    // agent_pipeline:in_ready -> width_adapter:out_ready
	wire    [3:0] width_adapter_src_channel;                                                                  // width_adapter:out_channel -> agent_pipeline:in_channel
	wire          agent_pipeline_source0_endofpacket;                                                         // agent_pipeline:out_endofpacket -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:cp_endofpacket
	wire          agent_pipeline_source0_valid;                                                               // agent_pipeline:out_valid -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:cp_valid
	wire          agent_pipeline_source0_startofpacket;                                                       // agent_pipeline:out_startofpacket -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:cp_startofpacket
	wire  [147:0] agent_pipeline_source0_data;                                                                // agent_pipeline:out_data -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:cp_data
	wire    [3:0] agent_pipeline_source0_channel;                                                             // agent_pipeline:out_channel -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:cp_channel
	wire          agent_pipeline_source0_ready;                                                               // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:cp_ready -> agent_pipeline:out_ready
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_endofpacket;             // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_valid;                   // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rp_valid -> agent_pipeline_001:in_valid
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_startofpacket;           // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire  [147:0] hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_data;                    // hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rp_data -> agent_pipeline_001:in_data
	wire          hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_ready;                   // agent_pipeline_001:in_ready -> hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent:rp_ready
	wire          agent_pipeline_001_source0_endofpacket;                                                     // agent_pipeline_001:out_endofpacket -> id_router:sink_endofpacket
	wire          agent_pipeline_001_source0_valid;                                                           // agent_pipeline_001:out_valid -> id_router:sink_valid
	wire          agent_pipeline_001_source0_startofpacket;                                                   // agent_pipeline_001:out_startofpacket -> id_router:sink_startofpacket
	wire  [147:0] agent_pipeline_001_source0_data;                                                            // agent_pipeline_001:out_data -> id_router:sink_data
	wire          agent_pipeline_001_source0_ready;                                                           // id_router:sink_ready -> agent_pipeline_001:out_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_0_m_write_translator (
		.clk                      (pll_sys_outclk0_clk),                                                //                       clk.clk
		.reset                    (sgdma_0_reset_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address              (sgdma_0_m_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_0_m_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_0_m_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_0_m_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_0_m_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_0_m_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_0_m_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_0_m_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_0_m_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_0_m_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_0_m_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_0_m_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_0_m_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (sgdma_0_m_write_byteenable),                                         //                          .byteenable
		.av_write                 (sgdma_0_m_write_write),                                              //                          .write
		.av_writedata             (sgdma_0_m_write_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                               //               (terminated)
		.av_read                  (1'b0),                                                               //               (terminated)
		.av_readdata              (),                                                                   //               (terminated)
		.av_readdatavalid         (),                                                                   //               (terminated)
		.av_lock                  (1'b0),                                                               //               (terminated)
		.av_debugaccess           (1'b0),                                                               //               (terminated)
		.uav_clken                (),                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                               //               (terminated)
		.uav_response             (2'b00),                                                              //               (terminated)
		.av_response              (),                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_0_m_read_translator (
		.clk                      (pll_sys_outclk0_clk),                                               //                       clk.clk
		.reset                    (sgdma_0_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address              (sgdma_0_m_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_0_m_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_0_m_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_0_m_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_0_m_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_0_m_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_0_m_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_0_m_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_0_m_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_0_m_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_0_m_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_0_m_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_0_m_read_waitrequest),                                        //                          .waitrequest
		.av_read                  (sgdma_0_m_read_read),                                               //                          .read
		.av_readdata              (sgdma_0_m_read_readdata),                                           //                          .readdata
		.av_readdatavalid         (sgdma_0_m_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                              //               (terminated)
		.av_byteenable            (4'b1111),                                                           //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                              //               (terminated)
		.av_begintransfer         (1'b0),                                                              //               (terminated)
		.av_chipselect            (1'b0),                                                              //               (terminated)
		.av_write                 (1'b0),                                                              //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                              //               (terminated)
		.av_lock                  (1'b0),                                                              //               (terminated)
		.av_debugaccess           (1'b0),                                                              //               (terminated)
		.uav_clken                (),                                                                  //               (terminated)
		.av_clken                 (1'b1),                                                              //               (terminated)
		.uav_response             (2'b00),                                                             //               (terminated)
		.av_response              (),                                                                  //               (terminated)
		.uav_writeresponserequest (),                                                                  //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                              //               (terminated)
		.av_writeresponserequest  (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid    ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_0_descriptor_write_translator (
		.clk                      (pll_sys_outclk0_clk),                                                         //                       clk.clk
		.reset                    (sgdma_0_reset_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (sgdma_0_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_0_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_0_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_0_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_0_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_0_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_0_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_0_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_0_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_0_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_0_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_0_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_0_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write                 (sgdma_0_descriptor_write_write),                                              //                          .write
		.av_writedata             (sgdma_0_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount            (1'b1),                                                                        //               (terminated)
		.av_byteenable            (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                        //               (terminated)
		.av_begintransfer         (1'b0),                                                                        //               (terminated)
		.av_chipselect            (1'b0),                                                                        //               (terminated)
		.av_read                  (1'b0),                                                                        //               (terminated)
		.av_readdata              (),                                                                            //               (terminated)
		.av_readdatavalid         (),                                                                            //               (terminated)
		.av_lock                  (1'b0),                                                                        //               (terminated)
		.av_debugaccess           (1'b0),                                                                        //               (terminated)
		.uav_clken                (),                                                                            //               (terminated)
		.av_clken                 (1'b1),                                                                        //               (terminated)
		.uav_response             (2'b00),                                                                       //               (terminated)
		.av_response              (),                                                                            //               (terminated)
		.uav_writeresponserequest (),                                                                            //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                        //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid    ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sgdma_0_descriptor_read_translator (
		.clk                      (pll_sys_outclk0_clk),                                                        //                       clk.clk
		.reset                    (sgdma_0_reset_reset_bridge_in_reset_reset),                                  //                     reset.reset
		.uav_address              (sgdma_0_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (sgdma_0_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (sgdma_0_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (sgdma_0_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (sgdma_0_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (sgdma_0_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (sgdma_0_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (sgdma_0_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (sgdma_0_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (sgdma_0_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (sgdma_0_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (sgdma_0_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (sgdma_0_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                  (sgdma_0_descriptor_read_read),                                               //                          .read
		.av_readdata              (sgdma_0_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid         (sgdma_0_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                       //               (terminated)
		.av_byteenable            (4'b1111),                                                                    //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                       //               (terminated)
		.av_begintransfer         (1'b0),                                                                       //               (terminated)
		.av_chipselect            (1'b0),                                                                       //               (terminated)
		.av_write                 (1'b0),                                                                       //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                       //               (terminated)
		.av_lock                  (1'b0),                                                                       //               (terminated)
		.av_debugaccess           (1'b0),                                                                       //               (terminated)
		.uav_clken                (),                                                                           //               (terminated)
		.av_clken                 (1'b1),                                                                       //               (terminated)
		.uav_response             (2'b00),                                                                      //               (terminated)
		.av_response              (),                                                                           //               (terminated)
		.uav_writeresponserequest (),                                                                           //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                       //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid    ()                                                                            //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (29),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (11),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hps_0_f2h_sdram0_data_translator (
		.clk                      (pll_sys_outclk0_clk),                                                              //                      clk.clk
		.reset                    (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address              (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_read),          //                         .read
		.uav_write                (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (hps_0_f2h_sdram0_data_address),                                                    //      avalon_anti_slave_0.address
		.av_write                 (hps_0_f2h_sdram0_data_write),                                                      //                         .write
		.av_read                  (hps_0_f2h_sdram0_data_read),                                                       //                         .read
		.av_readdata              (hps_0_f2h_sdram0_data_readdata),                                                   //                         .readdata
		.av_writedata             (hps_0_f2h_sdram0_data_writedata),                                                  //                         .writedata
		.av_burstcount            (hps_0_f2h_sdram0_data_burstcount),                                                 //                         .burstcount
		.av_byteenable            (hps_0_f2h_sdram0_data_byteenable),                                                 //                         .byteenable
		.av_readdatavalid         (hps_0_f2h_sdram0_data_readdatavalid),                                              //                         .readdatavalid
		.av_waitrequest           (hps_0_f2h_sdram0_data_waitrequest),                                                //                         .waitrequest
		.av_begintransfer         (),                                                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                                                 //              (terminated)
		.av_writebyteenable       (),                                                                                 //              (terminated)
		.av_lock                  (),                                                                                 //              (terminated)
		.av_chipselect            (),                                                                                 //              (terminated)
		.av_clken                 (),                                                                                 //              (terminated)
		.uav_clken                (1'b0),                                                                             //              (terminated)
		.av_debugaccess           (),                                                                                 //              (terminated)
		.av_outputenable          (),                                                                                 //              (terminated)
		.uav_response             (),                                                                                 //              (terminated)
		.av_response              (2'b00),                                                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                                                 //              (terminated)
		.av_writeresponserequest  (),                                                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                              //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (97),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_ORI_BURST_SIZE_H      (111),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_0_m_write_translator_avalon_universal_master_0_agent (
		.clk                     (pll_sys_outclk0_clk),                                                         //       clk.clk
		.reset                   (sgdma_0_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (sgdma_0_m_write_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (sgdma_0_m_write_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (sgdma_0_m_write_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (sgdma_0_m_write_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (sgdma_0_m_write_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (sgdma_0_m_write_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (sgdma_0_m_write_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (sgdma_0_m_write_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (sgdma_0_m_write_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (sgdma_0_m_write_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (sgdma_0_m_write_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_src_valid),                                                      //        rp.valid
		.rp_data                 (rsp_xbar_mux_src_data),                                                       //          .data
		.rp_channel              (rsp_xbar_mux_src_channel),                                                    //          .channel
		.rp_startofpacket        (rsp_xbar_mux_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_src_endofpacket),                                                //          .endofpacket
		.rp_ready                (rsp_xbar_mux_src_ready),                                                      //          .ready
		.av_response             (),                                                                            // (terminated)
		.av_writeresponserequest (1'b0),                                                                        // (terminated)
		.av_writeresponsevalid   ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (97),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_ORI_BURST_SIZE_H      (111),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_0_m_read_translator_avalon_universal_master_0_agent (
		.clk                     (pll_sys_outclk0_clk),                                                        //       clk.clk
		.reset                   (sgdma_0_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.av_address              (sgdma_0_m_read_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (sgdma_0_m_read_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (sgdma_0_m_read_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (sgdma_0_m_read_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (sgdma_0_m_read_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (sgdma_0_m_read_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (sgdma_0_m_read_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (sgdma_0_m_read_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (sgdma_0_m_read_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (sgdma_0_m_read_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (sgdma_0_m_read_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_001_src_valid),                                                 //        rp.valid
		.rp_data                 (rsp_xbar_mux_001_src_data),                                                  //          .data
		.rp_channel              (rsp_xbar_mux_001_src_channel),                                               //          .channel
		.rp_startofpacket        (rsp_xbar_mux_001_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_001_src_endofpacket),                                           //          .endofpacket
		.rp_ready                (rsp_xbar_mux_001_src_ready),                                                 //          .ready
		.av_response             (),                                                                           // (terminated)
		.av_writeresponserequest (1'b0),                                                                       // (terminated)
		.av_writeresponsevalid   ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (97),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_ORI_BURST_SIZE_H      (111),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent (
		.clk                     (pll_sys_outclk0_clk),                                                                  //       clk.clk
		.reset                   (sgdma_0_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.av_address              (sgdma_0_descriptor_write_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (sgdma_0_descriptor_write_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (sgdma_0_descriptor_write_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (sgdma_0_descriptor_write_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (sgdma_0_descriptor_write_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (sgdma_0_descriptor_write_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (sgdma_0_descriptor_write_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (sgdma_0_descriptor_write_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (sgdma_0_descriptor_write_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (sgdma_0_descriptor_write_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (sgdma_0_descriptor_write_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_002_src_valid),                                                           //        rp.valid
		.rp_data                 (rsp_xbar_mux_002_src_data),                                                            //          .data
		.rp_channel              (rsp_xbar_mux_002_src_channel),                                                         //          .channel
		.rp_startofpacket        (rsp_xbar_mux_002_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_002_src_endofpacket),                                                     //          .endofpacket
		.rp_ready                (rsp_xbar_mux_002_src_ready),                                                           //          .ready
		.av_response             (),                                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BEGIN_BURST           (93),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (96),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (97),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_ORI_BURST_SIZE_H      (111),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (4),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent (
		.clk                     (pll_sys_outclk0_clk),                                                                 //       clk.clk
		.reset                   (sgdma_0_reset_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.av_address              (sgdma_0_descriptor_read_translator_avalon_universal_master_0_address),                //        av.address
		.av_write                (sgdma_0_descriptor_read_translator_avalon_universal_master_0_write),                  //          .write
		.av_read                 (sgdma_0_descriptor_read_translator_avalon_universal_master_0_read),                   //          .read
		.av_writedata            (sgdma_0_descriptor_read_translator_avalon_universal_master_0_writedata),              //          .writedata
		.av_readdata             (sgdma_0_descriptor_read_translator_avalon_universal_master_0_readdata),               //          .readdata
		.av_waitrequest          (sgdma_0_descriptor_read_translator_avalon_universal_master_0_waitrequest),            //          .waitrequest
		.av_readdatavalid        (sgdma_0_descriptor_read_translator_avalon_universal_master_0_readdatavalid),          //          .readdatavalid
		.av_byteenable           (sgdma_0_descriptor_read_translator_avalon_universal_master_0_byteenable),             //          .byteenable
		.av_burstcount           (sgdma_0_descriptor_read_translator_avalon_universal_master_0_burstcount),             //          .burstcount
		.av_debugaccess          (sgdma_0_descriptor_read_translator_avalon_universal_master_0_debugaccess),            //          .debugaccess
		.av_lock                 (sgdma_0_descriptor_read_translator_avalon_universal_master_0_lock),                   //          .lock
		.cp_valid                (sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_valid),         //        cp.valid
		.cp_data                 (sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.cp_startofpacket        (sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.cp_endofpacket          (sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.cp_ready                (sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_ready),         //          .ready
		.rp_valid                (rsp_xbar_mux_003_src_valid),                                                          //        rp.valid
		.rp_data                 (rsp_xbar_mux_003_src_data),                                                           //          .data
		.rp_channel              (rsp_xbar_mux_003_src_channel),                                                        //          .channel
		.rp_startofpacket        (rsp_xbar_mux_003_src_startofpacket),                                                  //          .startofpacket
		.rp_endofpacket          (rsp_xbar_mux_003_src_endofpacket),                                                    //          .endofpacket
		.rp_ready                (rsp_xbar_mux_003_src_ready),                                                          //          .ready
		.av_response             (),                                                                                    // (terminated)
		.av_writeresponserequest (1'b0),                                                                                // (terminated)
		.av_writeresponsevalid   ()                                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (129),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_TRANS_LOCK            (108),
		.PKT_SRC_ID_H              (132),
		.PKT_SRC_ID_L              (131),
		.PKT_DEST_ID_H             (134),
		.PKT_DEST_ID_L             (133),
		.PKT_BURSTWRAP_H           (121),
		.PKT_BURSTWRAP_L           (121),
		.PKT_BYTE_CNT_H            (120),
		.PKT_BYTE_CNT_L            (110),
		.PKT_PROTECTION_H          (138),
		.PKT_PROTECTION_L          (136),
		.PKT_RESPONSE_STATUS_H     (144),
		.PKT_RESPONSE_STATUS_L     (143),
		.PKT_BURST_SIZE_H          (124),
		.PKT_BURST_SIZE_L          (122),
		.PKT_ORI_BURST_SIZE_L      (145),
		.PKT_ORI_BURST_SIZE_H      (147),
		.ST_CHANNEL_W              (4),
		.ST_DATA_W                 (148),
		.AVS_BURSTCOUNT_W          (11),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent (
		.clk                     (pll_sys_outclk0_clk),                                                                        //             clk.clk
		.reset                   (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                                               //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                                               //                .valid
		.cp_data                 (agent_pipeline_source0_data),                                                                //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                                                       //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                                                         //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                                                             //                .channel
		.rf_sink_ready           (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                                      //     (terminated)
		.m0_writeresponserequest (),                                                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (149),
		.FIFO_DEPTH          (15),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo (
		.clk               (pll_sys_outclk0_clk),                                                                        //       clk.clk
		.reset             (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                                      // (terminated)
		.csr_read          (1'b0),                                                                                       // (terminated)
		.csr_write         (1'b0),                                                                                       // (terminated)
		.csr_readdata      (),                                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                                       // (terminated)
		.almost_full_data  (),                                                                                           // (terminated)
		.almost_empty_data (),                                                                                           // (terminated)
		.in_empty          (1'b0),                                                                                       // (terminated)
		.out_empty         (),                                                                                           // (terminated)
		.in_error          (1'b0),                                                                                       // (terminated)
		.out_error         (),                                                                                           // (terminated)
		.in_channel        (1'b0),                                                                                       // (terminated)
		.out_channel       ()                                                                                            // (terminated)
	);

	DE1_SoC_QSYS_mm_interconnect_5_addr_router addr_router (
		.sink_ready         (sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_0_m_write_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                                                         //       clk.clk
		.reset              (sgdma_0_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.src_ready          (addr_router_src_ready),                                                       //       src.ready
		.src_valid          (addr_router_src_valid),                                                       //          .valid
		.src_data           (addr_router_src_data),                                                        //          .data
		.src_channel        (addr_router_src_channel),                                                     //          .channel
		.src_startofpacket  (addr_router_src_startofpacket),                                               //          .startofpacket
		.src_endofpacket    (addr_router_src_endofpacket)                                                  //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_addr_router addr_router_001 (
		.sink_ready         (sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_0_m_read_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                                                        //       clk.clk
		.reset              (sgdma_0_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready          (addr_router_001_src_ready),                                                  //       src.ready
		.src_valid          (addr_router_001_src_valid),                                                  //          .valid
		.src_data           (addr_router_001_src_data),                                                   //          .data
		.src_channel        (addr_router_001_src_channel),                                                //          .channel
		.src_startofpacket  (addr_router_001_src_startofpacket),                                          //          .startofpacket
		.src_endofpacket    (addr_router_001_src_endofpacket)                                             //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_addr_router addr_router_002 (
		.sink_ready         (sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_0_descriptor_write_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                                                                  //       clk.clk
		.reset              (sgdma_0_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.src_ready          (addr_router_002_src_ready),                                                            //       src.ready
		.src_valid          (addr_router_002_src_valid),                                                            //          .valid
		.src_data           (addr_router_002_src_data),                                                             //          .data
		.src_channel        (addr_router_002_src_channel),                                                          //          .channel
		.src_startofpacket  (addr_router_002_src_startofpacket),                                                    //          .startofpacket
		.src_endofpacket    (addr_router_002_src_endofpacket)                                                       //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_addr_router addr_router_003 (
		.sink_ready         (sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sgdma_0_descriptor_read_translator_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                                                                 //       clk.clk
		.reset              (sgdma_0_reset_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.src_ready          (addr_router_003_src_ready),                                                           //       src.ready
		.src_valid          (addr_router_003_src_valid),                                                           //          .valid
		.src_data           (addr_router_003_src_data),                                                            //          .data
		.src_channel        (addr_router_003_src_channel),                                                         //          .channel
		.src_startofpacket  (addr_router_003_src_startofpacket),                                                   //          .startofpacket
		.src_endofpacket    (addr_router_003_src_endofpacket)                                                      //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_id_router id_router (
		.sink_ready         (agent_pipeline_001_source0_ready),                                   //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                                   //          .valid
		.sink_data          (agent_pipeline_001_source0_data),                                    //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),                             //          .endofpacket
		.clk                (pll_sys_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (id_router_src_ready),                                                //       src.ready
		.src_valid          (id_router_src_valid),                                                //          .valid
		.src_data           (id_router_src_data),                                                 //          .data
		.src_channel        (id_router_src_channel),                                              //          .channel
		.src_startofpacket  (id_router_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (id_router_src_endofpacket)                                           //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_cmd_xbar_demux cmd_xbar_demux (
		.clk                (pll_sys_outclk0_clk),                       //       clk.clk
		.reset              (sgdma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_src_ready),                     //      sink.ready
		.sink_channel       (addr_router_src_channel),                   //          .channel
		.sink_data          (addr_router_src_data),                      //          .data
		.sink_startofpacket (addr_router_src_startofpacket),             //          .startofpacket
		.sink_endofpacket   (addr_router_src_endofpacket),               //          .endofpacket
		.sink_valid         (addr_router_src_valid),                     //          .valid
		.src0_ready         (cmd_xbar_demux_src0_ready),                 //      src0.ready
		.src0_valid         (cmd_xbar_demux_src0_valid),                 //          .valid
		.src0_data          (cmd_xbar_demux_src0_data),                  //          .data
		.src0_channel       (cmd_xbar_demux_src0_channel),               //          .channel
		.src0_startofpacket (cmd_xbar_demux_src0_startofpacket),         //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_src0_endofpacket)            //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_cmd_xbar_demux cmd_xbar_demux_001 (
		.clk                (pll_sys_outclk0_clk),                       //       clk.clk
		.reset              (sgdma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_001_src_ready),                 //      sink.ready
		.sink_channel       (addr_router_001_src_channel),               //          .channel
		.sink_data          (addr_router_001_src_data),                  //          .data
		.sink_startofpacket (addr_router_001_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (addr_router_001_src_endofpacket),           //          .endofpacket
		.sink_valid         (addr_router_001_src_valid),                 //          .valid
		.src0_ready         (cmd_xbar_demux_001_src0_ready),             //      src0.ready
		.src0_valid         (cmd_xbar_demux_001_src0_valid),             //          .valid
		.src0_data          (cmd_xbar_demux_001_src0_data),              //          .data
		.src0_channel       (cmd_xbar_demux_001_src0_channel),           //          .channel
		.src0_startofpacket (cmd_xbar_demux_001_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_001_src0_endofpacket)        //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_cmd_xbar_demux cmd_xbar_demux_002 (
		.clk                (pll_sys_outclk0_clk),                       //       clk.clk
		.reset              (sgdma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_002_src_ready),                 //      sink.ready
		.sink_channel       (addr_router_002_src_channel),               //          .channel
		.sink_data          (addr_router_002_src_data),                  //          .data
		.sink_startofpacket (addr_router_002_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (addr_router_002_src_endofpacket),           //          .endofpacket
		.sink_valid         (addr_router_002_src_valid),                 //          .valid
		.src0_ready         (cmd_xbar_demux_002_src0_ready),             //      src0.ready
		.src0_valid         (cmd_xbar_demux_002_src0_valid),             //          .valid
		.src0_data          (cmd_xbar_demux_002_src0_data),              //          .data
		.src0_channel       (cmd_xbar_demux_002_src0_channel),           //          .channel
		.src0_startofpacket (cmd_xbar_demux_002_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_002_src0_endofpacket)        //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_cmd_xbar_demux cmd_xbar_demux_003 (
		.clk                (pll_sys_outclk0_clk),                       //       clk.clk
		.reset              (sgdma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (addr_router_003_src_ready),                 //      sink.ready
		.sink_channel       (addr_router_003_src_channel),               //          .channel
		.sink_data          (addr_router_003_src_data),                  //          .data
		.sink_startofpacket (addr_router_003_src_startofpacket),         //          .startofpacket
		.sink_endofpacket   (addr_router_003_src_endofpacket),           //          .endofpacket
		.sink_valid         (addr_router_003_src_valid),                 //          .valid
		.src0_ready         (cmd_xbar_demux_003_src0_ready),             //      src0.ready
		.src0_valid         (cmd_xbar_demux_003_src0_valid),             //          .valid
		.src0_data          (cmd_xbar_demux_003_src0_data),              //          .data
		.src0_channel       (cmd_xbar_demux_003_src0_channel),           //          .channel
		.src0_startofpacket (cmd_xbar_demux_003_src0_startofpacket),     //          .startofpacket
		.src0_endofpacket   (cmd_xbar_demux_003_src0_endofpacket)        //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_cmd_xbar_mux cmd_xbar_mux (
		.clk                 (pll_sys_outclk0_clk),                                                //       clk.clk
		.reset               (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_xbar_mux_src_ready),                                             //       src.ready
		.src_valid           (cmd_xbar_mux_src_valid),                                             //          .valid
		.src_data            (cmd_xbar_mux_src_data),                                              //          .data
		.src_channel         (cmd_xbar_mux_src_channel),                                           //          .channel
		.src_startofpacket   (cmd_xbar_mux_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket     (cmd_xbar_mux_src_endofpacket),                                       //          .endofpacket
		.sink0_ready         (cmd_xbar_demux_src0_ready),                                          //     sink0.ready
		.sink0_valid         (cmd_xbar_demux_src0_valid),                                          //          .valid
		.sink0_channel       (cmd_xbar_demux_src0_channel),                                        //          .channel
		.sink0_data          (cmd_xbar_demux_src0_data),                                           //          .data
		.sink0_startofpacket (cmd_xbar_demux_src0_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket   (cmd_xbar_demux_src0_endofpacket),                                    //          .endofpacket
		.sink1_ready         (cmd_xbar_demux_001_src0_ready),                                      //     sink1.ready
		.sink1_valid         (cmd_xbar_demux_001_src0_valid),                                      //          .valid
		.sink1_channel       (cmd_xbar_demux_001_src0_channel),                                    //          .channel
		.sink1_data          (cmd_xbar_demux_001_src0_data),                                       //          .data
		.sink1_startofpacket (cmd_xbar_demux_001_src0_startofpacket),                              //          .startofpacket
		.sink1_endofpacket   (cmd_xbar_demux_001_src0_endofpacket),                                //          .endofpacket
		.sink2_ready         (cmd_xbar_demux_002_src0_ready),                                      //     sink2.ready
		.sink2_valid         (cmd_xbar_demux_002_src0_valid),                                      //          .valid
		.sink2_channel       (cmd_xbar_demux_002_src0_channel),                                    //          .channel
		.sink2_data          (cmd_xbar_demux_002_src0_data),                                       //          .data
		.sink2_startofpacket (cmd_xbar_demux_002_src0_startofpacket),                              //          .startofpacket
		.sink2_endofpacket   (cmd_xbar_demux_002_src0_endofpacket),                                //          .endofpacket
		.sink3_ready         (cmd_xbar_demux_003_src0_ready),                                      //     sink3.ready
		.sink3_valid         (cmd_xbar_demux_003_src0_valid),                                      //          .valid
		.sink3_channel       (cmd_xbar_demux_003_src0_channel),                                    //          .channel
		.sink3_data          (cmd_xbar_demux_003_src0_data),                                       //          .data
		.sink3_startofpacket (cmd_xbar_demux_003_src0_startofpacket),                              //          .startofpacket
		.sink3_endofpacket   (cmd_xbar_demux_003_src0_endofpacket)                                 //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_rsp_xbar_demux rsp_xbar_demux (
		.clk                (pll_sys_outclk0_clk),                                                //       clk.clk
		.reset              (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (width_adapter_001_src_ready),                                        //      sink.ready
		.sink_channel       (width_adapter_001_src_channel),                                      //          .channel
		.sink_data          (width_adapter_001_src_data),                                         //          .data
		.sink_startofpacket (width_adapter_001_src_startofpacket),                                //          .startofpacket
		.sink_endofpacket   (width_adapter_001_src_endofpacket),                                  //          .endofpacket
		.sink_valid         (width_adapter_001_src_valid),                                        //          .valid
		.src0_ready         (rsp_xbar_demux_src0_ready),                                          //      src0.ready
		.src0_valid         (rsp_xbar_demux_src0_valid),                                          //          .valid
		.src0_data          (rsp_xbar_demux_src0_data),                                           //          .data
		.src0_channel       (rsp_xbar_demux_src0_channel),                                        //          .channel
		.src0_startofpacket (rsp_xbar_demux_src0_startofpacket),                                  //          .startofpacket
		.src0_endofpacket   (rsp_xbar_demux_src0_endofpacket),                                    //          .endofpacket
		.src1_ready         (rsp_xbar_demux_src1_ready),                                          //      src1.ready
		.src1_valid         (rsp_xbar_demux_src1_valid),                                          //          .valid
		.src1_data          (rsp_xbar_demux_src1_data),                                           //          .data
		.src1_channel       (rsp_xbar_demux_src1_channel),                                        //          .channel
		.src1_startofpacket (rsp_xbar_demux_src1_startofpacket),                                  //          .startofpacket
		.src1_endofpacket   (rsp_xbar_demux_src1_endofpacket),                                    //          .endofpacket
		.src2_ready         (rsp_xbar_demux_src2_ready),                                          //      src2.ready
		.src2_valid         (rsp_xbar_demux_src2_valid),                                          //          .valid
		.src2_data          (rsp_xbar_demux_src2_data),                                           //          .data
		.src2_channel       (rsp_xbar_demux_src2_channel),                                        //          .channel
		.src2_startofpacket (rsp_xbar_demux_src2_startofpacket),                                  //          .startofpacket
		.src2_endofpacket   (rsp_xbar_demux_src2_endofpacket),                                    //          .endofpacket
		.src3_ready         (rsp_xbar_demux_src3_ready),                                          //      src3.ready
		.src3_valid         (rsp_xbar_demux_src3_valid),                                          //          .valid
		.src3_data          (rsp_xbar_demux_src3_data),                                           //          .data
		.src3_channel       (rsp_xbar_demux_src3_channel),                                        //          .channel
		.src3_startofpacket (rsp_xbar_demux_src3_startofpacket),                                  //          .startofpacket
		.src3_endofpacket   (rsp_xbar_demux_src3_endofpacket)                                     //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_rsp_xbar_mux rsp_xbar_mux (
		.clk                 (pll_sys_outclk0_clk),                       //       clk.clk
		.reset               (sgdma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_src_ready),                    //       src.ready
		.src_valid           (rsp_xbar_mux_src_valid),                    //          .valid
		.src_data            (rsp_xbar_mux_src_data),                     //          .data
		.src_channel         (rsp_xbar_mux_src_channel),                  //          .channel
		.src_startofpacket   (rsp_xbar_mux_src_startofpacket),            //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_src_endofpacket),              //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src0_ready),                 //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src0_valid),                 //          .valid
		.sink0_channel       (rsp_xbar_demux_src0_channel),               //          .channel
		.sink0_data          (rsp_xbar_demux_src0_data),                  //          .data
		.sink0_startofpacket (rsp_xbar_demux_src0_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src0_endofpacket)            //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_rsp_xbar_mux rsp_xbar_mux_001 (
		.clk                 (pll_sys_outclk0_clk),                       //       clk.clk
		.reset               (sgdma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_001_src_ready),                //       src.ready
		.src_valid           (rsp_xbar_mux_001_src_valid),                //          .valid
		.src_data            (rsp_xbar_mux_001_src_data),                 //          .data
		.src_channel         (rsp_xbar_mux_001_src_channel),              //          .channel
		.src_startofpacket   (rsp_xbar_mux_001_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_001_src_endofpacket),          //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src1_ready),                 //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src1_valid),                 //          .valid
		.sink0_channel       (rsp_xbar_demux_src1_channel),               //          .channel
		.sink0_data          (rsp_xbar_demux_src1_data),                  //          .data
		.sink0_startofpacket (rsp_xbar_demux_src1_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src1_endofpacket)            //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_rsp_xbar_mux rsp_xbar_mux_002 (
		.clk                 (pll_sys_outclk0_clk),                       //       clk.clk
		.reset               (sgdma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_002_src_ready),                //       src.ready
		.src_valid           (rsp_xbar_mux_002_src_valid),                //          .valid
		.src_data            (rsp_xbar_mux_002_src_data),                 //          .data
		.src_channel         (rsp_xbar_mux_002_src_channel),              //          .channel
		.src_startofpacket   (rsp_xbar_mux_002_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_002_src_endofpacket),          //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src2_ready),                 //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src2_valid),                 //          .valid
		.sink0_channel       (rsp_xbar_demux_src2_channel),               //          .channel
		.sink0_data          (rsp_xbar_demux_src2_data),                  //          .data
		.sink0_startofpacket (rsp_xbar_demux_src2_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src2_endofpacket)            //          .endofpacket
	);

	DE1_SoC_QSYS_mm_interconnect_5_rsp_xbar_mux rsp_xbar_mux_003 (
		.clk                 (pll_sys_outclk0_clk),                       //       clk.clk
		.reset               (sgdma_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_xbar_mux_003_src_ready),                //       src.ready
		.src_valid           (rsp_xbar_mux_003_src_valid),                //          .valid
		.src_data            (rsp_xbar_mux_003_src_data),                 //          .data
		.src_channel         (rsp_xbar_mux_003_src_channel),              //          .channel
		.src_startofpacket   (rsp_xbar_mux_003_src_startofpacket),        //          .startofpacket
		.src_endofpacket     (rsp_xbar_mux_003_src_endofpacket),          //          .endofpacket
		.sink0_ready         (rsp_xbar_demux_src3_ready),                 //     sink0.ready
		.sink0_valid         (rsp_xbar_demux_src3_valid),                 //          .valid
		.sink0_channel       (rsp_xbar_demux_src3_channel),               //          .channel
		.sink0_data          (rsp_xbar_demux_src3_data),                  //          .data
		.sink0_startofpacket (rsp_xbar_demux_src3_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (rsp_xbar_demux_src3_endofpacket)            //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (144),
		.OUT_PKT_RESPONSE_STATUS_L     (143),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (145),
		.OUT_PKT_ORI_BURST_SIZE_H      (147),
		.OUT_ST_DATA_W                 (148),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter (
		.clk                  (pll_sys_outclk0_clk),                                                //       clk.clk
		.reset                (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_xbar_mux_src_valid),                                             //      sink.valid
		.in_channel           (cmd_xbar_mux_src_channel),                                           //          .channel
		.in_startofpacket     (cmd_xbar_mux_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_xbar_mux_src_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_xbar_mux_src_ready),                                             //          .ready
		.in_data              (cmd_xbar_mux_src_data),                                              //          .data
		.out_endofpacket      (width_adapter_src_endofpacket),                                      //       src.endofpacket
		.out_data             (width_adapter_src_data),                                             //          .data
		.out_channel          (width_adapter_src_channel),                                          //          .channel
		.out_valid            (width_adapter_src_valid),                                            //          .valid
		.out_ready            (width_adapter_src_ready),                                            //          .ready
		.out_startofpacket    (width_adapter_src_startofpacket),                                    //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (144),
		.IN_PKT_RESPONSE_STATUS_L      (143),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (145),
		.IN_PKT_ORI_BURST_SIZE_H       (147),
		.IN_ST_DATA_W                  (148),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (4),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1)
	) width_adapter_001 (
		.clk                  (pll_sys_outclk0_clk),                                                //       clk.clk
		.reset                (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (id_router_src_valid),                                                //      sink.valid
		.in_channel           (id_router_src_channel),                                              //          .channel
		.in_startofpacket     (id_router_src_startofpacket),                                        //          .startofpacket
		.in_endofpacket       (id_router_src_endofpacket),                                          //          .endofpacket
		.in_ready             (id_router_src_ready),                                                //          .ready
		.in_data              (id_router_src_data),                                                 //          .data
		.out_endofpacket      (width_adapter_001_src_endofpacket),                                  //       src.endofpacket
		.out_data             (width_adapter_001_src_data),                                         //          .data
		.out_channel          (width_adapter_001_src_channel),                                      //          .channel
		.out_valid            (width_adapter_001_src_valid),                                        //          .valid
		.out_ready            (width_adapter_001_src_ready),                                        //          .ready
		.out_startofpacket    (width_adapter_001_src_startofpacket),                                //          .startofpacket
		.in_command_size_data (3'b000)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (148),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (4),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (pll_sys_outclk0_clk),                                                //       cr0.clk
		.reset             (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (width_adapter_src_ready),                                            //     sink0.ready
		.in_valid          (width_adapter_src_valid),                                            //          .valid
		.in_startofpacket  (width_adapter_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket    (width_adapter_src_endofpacket),                                      //          .endofpacket
		.in_data           (width_adapter_src_data),                                             //          .data
		.in_channel        (width_adapter_src_channel),                                          //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                       //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                       //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                               //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                                 //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                        //          .data
		.out_channel       (agent_pipeline_source0_channel),                                     //          .channel
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_error          (1'b0)                                                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (148),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (pll_sys_outclk0_clk),                                                              //       cr0.clk
		.reset             (hps_0_f2h_sdram0_data_translator_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.in_ready          (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_ready),         //     sink0.ready
		.in_valid          (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_valid),         //          .valid
		.in_startofpacket  (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (hps_0_f2h_sdram0_data_translator_avalon_universal_slave_0_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                                                 //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                                                 //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                                         //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                                           //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                                  //          .data
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_channel       (),                                                                                 // (terminated)
		.in_channel        (1'b0)                                                                              // (terminated)
	);

endmodule
