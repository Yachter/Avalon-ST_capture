// DE1_SoC_QSYS_alt_vip_avst_video_monitor_0_monitor.v

// This file was auto-generated from altera_trace_video_monitor_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 13.1 182 at 2017.03.14.18:12:11

`timescale 1 ps / 1 ps
module DE1_SoC_QSYS_alt_vip_avst_video_monitor_0_monitor #(
		parameter THUMBNAIL_SUPPORT = 1
	) (
		input  wire        clock_clk,             //   clock.clk
		input  wire        reset_reset,           //   reset.reset
		input  wire        tap_valid,             //     tap.valid
		input  wire [23:0] tap_data,              //        .data
		input  wire        tap_ready,             //        .ready
		input  wire        tap_startofpacket,     //        .startofpacket
		input  wire        tap_endofpacket,       //        .endofpacket
		output wire        control_waitrequest,   // control.waitrequest
		output wire [31:0] control_readdata,      //        .readdata
		output wire        control_readdatavalid, //        .readdatavalid
		input  wire [0:0]  control_burstcount,    //        .burstcount
		input  wire [31:0] control_writedata,     //        .writedata
		input  wire [7:0]  control_address,       //        .address
		input  wire        control_write,         //        .write
		input  wire        control_read,          //        .read
		input  wire [3:0]  control_byteenable,    //        .byteenable
		input  wire        control_debugaccess,   //        .debugaccess
		input  wire        capture_ready,         // capture.ready
		output wire        capture_valid,         //        .valid
		output wire [31:0] capture_data,          //        .data
		output wire        capture_startofpacket, //        .startofpacket
		output wire        capture_endofpacket,   //        .endofpacket
		output wire [1:0]  capture_empty          //        .empty
	);

	wire         monitor_capture_endofpacket;                     // monitor:av_st_tr_eop -> monitor_pipe:in_endofpacket
	wire         monitor_capture_valid;                           // monitor:av_st_tr_valid -> monitor_pipe:in_valid
	wire         monitor_capture_startofpacket;                   // monitor:av_st_tr_sop -> monitor_pipe:in_startofpacket
	wire   [1:0] monitor_capture_empty;                           // monitor:av_st_tr_empty -> monitor_pipe:in_empty
	wire  [31:0] monitor_capture_data;                            // monitor:av_st_tr_data -> monitor_pipe:in_data
	wire         monitor_capture_ready;                           // monitor_pipe:in_ready -> monitor:av_st_tr_ready
	wire         monitor_pipe_source0_endofpacket;                // monitor_pipe:out_endofpacket -> capture_mux:in0_endofpacket
	wire         monitor_pipe_source0_valid;                      // monitor_pipe:out_valid -> capture_mux:in0_valid
	wire         monitor_pipe_source0_startofpacket;              // monitor_pipe:out_startofpacket -> capture_mux:in0_startofpacket
	wire  [31:0] monitor_pipe_source0_data;                       // monitor_pipe:out_data -> capture_mux:in0_data
	wire   [1:0] monitor_pipe_source0_empty;                      // monitor_pipe:out_empty -> capture_mux:in0_empty
	wire         monitor_pipe_source0_ready;                      // capture_mux:in0_ready -> monitor_pipe:out_ready
	wire         pixel_monitor_capture_endofpacket;               // pixel_monitor:av_st_tr_eop -> pixel_pipe:in_endofpacket
	wire         pixel_monitor_capture_valid;                     // pixel_monitor:av_st_tr_valid -> pixel_pipe:in_valid
	wire         pixel_monitor_capture_startofpacket;             // pixel_monitor:av_st_tr_sop -> pixel_pipe:in_startofpacket
	wire   [1:0] pixel_monitor_capture_empty;                     // pixel_monitor:av_st_tr_empty -> pixel_pipe:in_empty
	wire  [31:0] pixel_monitor_capture_data;                      // pixel_monitor:av_st_tr_data -> pixel_pipe:in_data
	wire         pixel_monitor_capture_ready;                     // pixel_pipe:in_ready -> pixel_monitor:av_st_tr_ready
	wire         pixel_pipe_source0_endofpacket;                  // pixel_pipe:out_endofpacket -> capture_mux:in1_endofpacket
	wire         pixel_pipe_source0_valid;                        // pixel_pipe:out_valid -> capture_mux:in1_valid
	wire         pixel_pipe_source0_startofpacket;                // pixel_pipe:out_startofpacket -> capture_mux:in1_startofpacket
	wire  [31:0] pixel_pipe_source0_data;                         // pixel_pipe:out_data -> capture_mux:in1_data
	wire   [1:0] pixel_pipe_source0_empty;                        // pixel_pipe:out_empty -> capture_mux:in1_empty
	wire         pixel_pipe_source0_ready;                        // capture_mux:in1_ready -> pixel_pipe:out_ready
	wire   [0:0] control_bridge_m0_burstcount;                    // control_bridge:m0_burstcount -> mm_interconnect_0:control_bridge_m0_burstcount
	wire         control_bridge_m0_waitrequest;                   // mm_interconnect_0:control_bridge_m0_waitrequest -> control_bridge:m0_waitrequest
	wire   [7:0] control_bridge_m0_address;                       // control_bridge:m0_address -> mm_interconnect_0:control_bridge_m0_address
	wire  [31:0] control_bridge_m0_writedata;                     // control_bridge:m0_writedata -> mm_interconnect_0:control_bridge_m0_writedata
	wire         control_bridge_m0_write;                         // control_bridge:m0_write -> mm_interconnect_0:control_bridge_m0_write
	wire         control_bridge_m0_read;                          // control_bridge:m0_read -> mm_interconnect_0:control_bridge_m0_read
	wire  [31:0] control_bridge_m0_readdata;                      // mm_interconnect_0:control_bridge_m0_readdata -> control_bridge:m0_readdata
	wire         control_bridge_m0_debugaccess;                   // control_bridge:m0_debugaccess -> mm_interconnect_0:control_bridge_m0_debugaccess
	wire   [3:0] control_bridge_m0_byteenable;                    // control_bridge:m0_byteenable -> mm_interconnect_0:control_bridge_m0_byteenable
	wire         control_bridge_m0_readdatavalid;                 // mm_interconnect_0:control_bridge_m0_readdatavalid -> control_bridge:m0_readdatavalid
	wire  [31:0] mm_interconnect_0_pixel_monitor_csr_s_writedata; // mm_interconnect_0:pixel_monitor_csr_s_writedata -> pixel_monitor:csr_s_write_data
	wire   [3:0] mm_interconnect_0_pixel_monitor_csr_s_address;   // mm_interconnect_0:pixel_monitor_csr_s_address -> pixel_monitor:csr_s_address
	wire         mm_interconnect_0_pixel_monitor_csr_s_write;     // mm_interconnect_0:pixel_monitor_csr_s_write -> pixel_monitor:csr_s_write
	wire         mm_interconnect_0_pixel_monitor_csr_s_read;      // mm_interconnect_0:pixel_monitor_csr_s_read -> pixel_monitor:csr_s_read
	wire  [31:0] mm_interconnect_0_pixel_monitor_csr_s_readdata;  // pixel_monitor:csr_s_readdata -> mm_interconnect_0:pixel_monitor_csr_s_readdata
	wire  [31:0] mm_interconnect_0_monitor_csr_s_writedata;       // mm_interconnect_0:monitor_csr_s_writedata -> monitor:csr_s_write_data
	wire   [3:0] mm_interconnect_0_monitor_csr_s_address;         // mm_interconnect_0:monitor_csr_s_address -> monitor:csr_s_address
	wire         mm_interconnect_0_monitor_csr_s_write;           // mm_interconnect_0:monitor_csr_s_write -> monitor:csr_s_write
	wire         mm_interconnect_0_monitor_csr_s_read;            // mm_interconnect_0:monitor_csr_s_read -> monitor:csr_s_read
	wire  [31:0] mm_interconnect_0_monitor_csr_s_readdata;        // monitor:csr_s_readdata -> mm_interconnect_0:monitor_csr_s_readdata

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (THUMBNAIL_SUPPORT != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					thumbnail_support_check ( .error(1'b1) );
		end
	endgenerate

	altera_trace_av_st_monitor #(
		.DEVICE_FAMILY          ("Cyclone V"),
		.MON_DATA_WIDTH         (24),
		.MON_EMPTY_WIDTH        (0),
		.MON_ERR_WIDTH          (0),
		.MON_CHANNEL_WIDTH      (0),
		.MON_READY_LATENCY      (1),
		.TRACE_OUT_SYMBOL_WIDTH (4),
		.FULL_TS_LENGTH         (48),
		.COUNTER_WIDTHS         (24),
		.BUFFER_DEPTH_WIDTH     (4),
		.TAP_CAPTURED_WORDS     (6),
		.TYPE_NUM               (272)
	) monitor (
		.clk              (clock_clk),                                 //       clk.clk
		.arst_n           (~reset_reset),                              //     reset.reset_n
		.csr_s_read       (mm_interconnect_0_monitor_csr_s_read),      //     csr_s.read
		.csr_s_address    (mm_interconnect_0_monitor_csr_s_address),   //          .address
		.csr_s_readdata   (mm_interconnect_0_monitor_csr_s_readdata),  //          .readdata
		.csr_s_write      (mm_interconnect_0_monitor_csr_s_write),     //          .write
		.csr_s_write_data (mm_interconnect_0_monitor_csr_s_writedata), //          .writedata
		.iut_st_ready     (tap_ready),                                 // tap_input.ready
		.iut_st_valid     (tap_valid),                                 //          .valid
		.iut_st_sop       (tap_startofpacket),                         //          .startofpacket
		.iut_st_eop       (tap_endofpacket),                           //          .endofpacket
		.iut_st_data      (tap_data),                                  //          .data
		.av_st_tr_ready   (monitor_capture_ready),                     //   capture.ready
		.av_st_tr_valid   (monitor_capture_valid),                     //          .valid
		.av_st_tr_sop     (monitor_capture_startofpacket),             //          .startofpacket
		.av_st_tr_eop     (monitor_capture_endofpacket),               //          .endofpacket
		.av_st_tr_data    (monitor_capture_data),                      //          .data
		.av_st_tr_empty   (monitor_capture_empty),                     //          .empty
		.iut_st_ch        (1'b0),                                      // (terminated)
		.iut_st_empty     (1'b0),                                      // (terminated)
		.iut_st_err       (1'b0)                                       // (terminated)
	);

	altera_trace_av_st_video_pixel_grabber_monitor #(
		.DEVICE_FAMILY       ("Cyclone V"),
		.MON_NUM_PIXELS      (3),
		.MON_PIXEL_WIDTH     (8),
		.MON_READY_LATENCY   (1),
		.BUFF_ADDR_WIDTH     (8),
		.FULL_TS_LENGTH      (48),
		.WAKE_UP_RUNNING     (0),
		.USE_READY           (1),
		.TRACE_OUT_SYM_WIDTH (4)
	) pixel_monitor (
		.clk              (clock_clk),                                       //       clk.clk
		.arst_n           (~reset_reset),                                    //     reset.reset_n
		.csr_s_read       (mm_interconnect_0_pixel_monitor_csr_s_read),      //     csr_s.read
		.csr_s_address    (mm_interconnect_0_pixel_monitor_csr_s_address),   //          .address
		.csr_s_readdata   (mm_interconnect_0_pixel_monitor_csr_s_readdata),  //          .readdata
		.csr_s_write      (mm_interconnect_0_pixel_monitor_csr_s_write),     //          .write
		.csr_s_write_data (mm_interconnect_0_pixel_monitor_csr_s_writedata), //          .writedata
		.iut_st_ready     (tap_ready),                                       // tap_input.ready
		.iut_st_valid     (tap_valid),                                       //          .valid
		.iut_st_sop       (tap_startofpacket),                               //          .startofpacket
		.iut_st_eop       (tap_endofpacket),                                 //          .endofpacket
		.iut_st_data      (tap_data),                                        //          .data
		.av_st_tr_ready   (pixel_monitor_capture_ready),                     //   capture.ready
		.av_st_tr_valid   (pixel_monitor_capture_valid),                     //          .valid
		.av_st_tr_sop     (pixel_monitor_capture_startofpacket),             //          .startofpacket
		.av_st_tr_eop     (pixel_monitor_capture_endofpacket),               //          .endofpacket
		.av_st_tr_data    (pixel_monitor_capture_data),                      //          .data
		.av_st_tr_empty   (pixel_monitor_capture_empty)                      //          .empty
	);

	DE1_SoC_QSYS_alt_vip_avst_video_monitor_0_monitor_capture_mux capture_mux (
		.clk               (clock_clk),                          //   clk.clk
		.reset_n           (~reset_reset),                       // reset.reset_n
		.in0_valid         (monitor_pipe_source0_valid),         //   in0.valid
		.in0_ready         (monitor_pipe_source0_ready),         //      .ready
		.in0_data          (monitor_pipe_source0_data),          //      .data
		.in0_startofpacket (monitor_pipe_source0_startofpacket), //      .startofpacket
		.in0_endofpacket   (monitor_pipe_source0_endofpacket),   //      .endofpacket
		.in0_empty         (monitor_pipe_source0_empty),         //      .empty
		.in1_valid         (pixel_pipe_source0_valid),           //   in1.valid
		.in1_ready         (pixel_pipe_source0_ready),           //      .ready
		.in1_data          (pixel_pipe_source0_data),            //      .data
		.in1_startofpacket (pixel_pipe_source0_startofpacket),   //      .startofpacket
		.in1_endofpacket   (pixel_pipe_source0_endofpacket),     //      .endofpacket
		.in1_empty         (pixel_pipe_source0_empty),           //      .empty
		.out_channel       (),                                   //   out.channel
		.out_valid         (capture_valid),                      //      .valid
		.out_ready         (capture_ready),                      //      .ready
		.out_data          (capture_data),                       //      .data
		.out_startofpacket (capture_startofpacket),              //      .startofpacket
		.out_endofpacket   (capture_endofpacket),                //      .endofpacket
		.out_empty         (capture_empty)                       //      .empty
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (4),
		.BITS_PER_SYMBOL  (8),
		.USE_PACKETS      (1),
		.USE_EMPTY        (1),
		.EMPTY_WIDTH      (2),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) monitor_pipe (
		.clk               (clock_clk),                          //       cr0.clk
		.reset             (reset_reset),                        // cr0_reset.reset
		.in_ready          (monitor_capture_ready),              //     sink0.ready
		.in_valid          (monitor_capture_valid),              //          .valid
		.in_startofpacket  (monitor_capture_startofpacket),      //          .startofpacket
		.in_endofpacket    (monitor_capture_endofpacket),        //          .endofpacket
		.in_empty          (monitor_capture_empty),              //          .empty
		.in_data           (monitor_capture_data),               //          .data
		.out_ready         (monitor_pipe_source0_ready),         //   source0.ready
		.out_valid         (monitor_pipe_source0_valid),         //          .valid
		.out_startofpacket (monitor_pipe_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (monitor_pipe_source0_endofpacket),   //          .endofpacket
		.out_empty         (monitor_pipe_source0_empty),         //          .empty
		.out_data          (monitor_pipe_source0_data),          //          .data
		.out_error         (),                                   // (terminated)
		.in_error          (1'b0),                               // (terminated)
		.out_channel       (),                                   // (terminated)
		.in_channel        (1'b0)                                // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (4),
		.BITS_PER_SYMBOL  (8),
		.USE_PACKETS      (1),
		.USE_EMPTY        (1),
		.EMPTY_WIDTH      (2),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) pixel_pipe (
		.clk               (clock_clk),                           //       cr0.clk
		.reset             (reset_reset),                         // cr0_reset.reset
		.in_ready          (pixel_monitor_capture_ready),         //     sink0.ready
		.in_valid          (pixel_monitor_capture_valid),         //          .valid
		.in_startofpacket  (pixel_monitor_capture_startofpacket), //          .startofpacket
		.in_endofpacket    (pixel_monitor_capture_endofpacket),   //          .endofpacket
		.in_empty          (pixel_monitor_capture_empty),         //          .empty
		.in_data           (pixel_monitor_capture_data),          //          .data
		.out_ready         (pixel_pipe_source0_ready),            //   source0.ready
		.out_valid         (pixel_pipe_source0_valid),            //          .valid
		.out_startofpacket (pixel_pipe_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (pixel_pipe_source0_endofpacket),      //          .endofpacket
		.out_empty         (pixel_pipe_source0_empty),            //          .empty
		.out_data          (pixel_pipe_source0_data),             //          .data
		.out_error         (),                                    // (terminated)
		.in_error          (1'b0),                                // (terminated)
		.out_channel       (),                                    // (terminated)
		.in_channel        (1'b0)                                 // (terminated)
	);

	altera_avalon_mm_bridge #(
		.DATA_WIDTH        (32),
		.SYMBOL_WIDTH      (8),
		.ADDRESS_WIDTH     (8),
		.BURSTCOUNT_WIDTH  (1),
		.PIPELINE_COMMAND  (0),
		.PIPELINE_RESPONSE (0)
	) control_bridge (
		.clk              (clock_clk),                       //   clk.clk
		.reset            (reset_reset),                     // reset.reset
		.s0_waitrequest   (control_waitrequest),             //    s0.waitrequest
		.s0_readdata      (control_readdata),                //      .readdata
		.s0_readdatavalid (control_readdatavalid),           //      .readdatavalid
		.s0_burstcount    (control_burstcount),              //      .burstcount
		.s0_writedata     (control_writedata),               //      .writedata
		.s0_address       (control_address),                 //      .address
		.s0_write         (control_write),                   //      .write
		.s0_read          (control_read),                    //      .read
		.s0_byteenable    (control_byteenable),              //      .byteenable
		.s0_debugaccess   (control_debugaccess),             //      .debugaccess
		.m0_waitrequest   (control_bridge_m0_waitrequest),   //    m0.waitrequest
		.m0_readdata      (control_bridge_m0_readdata),      //      .readdata
		.m0_readdatavalid (control_bridge_m0_readdatavalid), //      .readdatavalid
		.m0_burstcount    (control_bridge_m0_burstcount),    //      .burstcount
		.m0_writedata     (control_bridge_m0_writedata),     //      .writedata
		.m0_address       (control_bridge_m0_address),       //      .address
		.m0_write         (control_bridge_m0_write),         //      .write
		.m0_read          (control_bridge_m0_read),          //      .read
		.m0_byteenable    (control_bridge_m0_byteenable),    //      .byteenable
		.m0_debugaccess   (control_bridge_m0_debugaccess)    //      .debugaccess
	);

	DE1_SoC_QSYS_alt_vip_avst_video_monitor_0_monitor_mm_interconnect_0 mm_interconnect_0 (
		.clock_bridge_out_clk_clk                         (clock_clk),                                       //                       clock_bridge_out_clk.clk
		.control_bridge_reset_reset_bridge_in_reset_reset (reset_reset),                                     // control_bridge_reset_reset_bridge_in_reset.reset
		.control_bridge_m0_address                        (control_bridge_m0_address),                       //                          control_bridge_m0.address
		.control_bridge_m0_waitrequest                    (control_bridge_m0_waitrequest),                   //                                           .waitrequest
		.control_bridge_m0_burstcount                     (control_bridge_m0_burstcount),                    //                                           .burstcount
		.control_bridge_m0_byteenable                     (control_bridge_m0_byteenable),                    //                                           .byteenable
		.control_bridge_m0_read                           (control_bridge_m0_read),                          //                                           .read
		.control_bridge_m0_readdata                       (control_bridge_m0_readdata),                      //                                           .readdata
		.control_bridge_m0_readdatavalid                  (control_bridge_m0_readdatavalid),                 //                                           .readdatavalid
		.control_bridge_m0_write                          (control_bridge_m0_write),                         //                                           .write
		.control_bridge_m0_writedata                      (control_bridge_m0_writedata),                     //                                           .writedata
		.control_bridge_m0_debugaccess                    (control_bridge_m0_debugaccess),                   //                                           .debugaccess
		.monitor_csr_s_address                            (mm_interconnect_0_monitor_csr_s_address),         //                              monitor_csr_s.address
		.monitor_csr_s_write                              (mm_interconnect_0_monitor_csr_s_write),           //                                           .write
		.monitor_csr_s_read                               (mm_interconnect_0_monitor_csr_s_read),            //                                           .read
		.monitor_csr_s_readdata                           (mm_interconnect_0_monitor_csr_s_readdata),        //                                           .readdata
		.monitor_csr_s_writedata                          (mm_interconnect_0_monitor_csr_s_writedata),       //                                           .writedata
		.pixel_monitor_csr_s_address                      (mm_interconnect_0_pixel_monitor_csr_s_address),   //                        pixel_monitor_csr_s.address
		.pixel_monitor_csr_s_write                        (mm_interconnect_0_pixel_monitor_csr_s_write),     //                                           .write
		.pixel_monitor_csr_s_read                         (mm_interconnect_0_pixel_monitor_csr_s_read),      //                                           .read
		.pixel_monitor_csr_s_readdata                     (mm_interconnect_0_pixel_monitor_csr_s_readdata),  //                                           .readdata
		.pixel_monitor_csr_s_writedata                    (mm_interconnect_0_pixel_monitor_csr_s_writedata)  //                                           .writedata
	);

endmodule
